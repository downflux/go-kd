package generator

import (
	"fmt"
	"math/rand"
	"runtime"

	"github.com/downflux/go-geometry/nd/vector"
	"github.com/downflux/go-kd/point"
	"github.com/kyroy/kdtree"
	"github.com/kyroy/kdtree/points"

	mock "github.com/downflux/go-kd/internal/point/testdata/mock"
)

const (
	min = -100.
	max = 100.
)

// Interval returns the range of the floats that may be generated by this
// package.
var Interval = max - min

func F() float64 { return rand.Float64()*Interval - (Interval / 2) }

func V(d vector.D) vector.V {
	xs := make([]float64, d)
	for i := 0; i < int(d); i++ {
		xs[i] = F()
	}

	return vector.V(xs)
}

func P(n int, d vector.D) []point.P {
	// Generating large number of points in tests will mess with data
	// collection figures. We should ignore these allocs.
	runtime.MemProfileRate = 0
	defer func() { runtime.MemProfileRate = 512 * 1024 }()

	ps := make([]point.P, n)
	for i := 0; i < n; i++ {
		ps[i] = *mock.New(V(d), fmt.Sprintf("Random-%v", i))
	}
	return ps
}

func R(ps []point.P) []kdtree.Point {
	runtime.MemProfileRate = 0
	defer func() { runtime.MemProfileRate = 512 * 1024 }()

	var rs []kdtree.Point
	for _, p := range ps {
		rs = append(rs, points.NewPoint([]float64{p.P().X(0), p.P().X(1)}, ""))
	}
	return rs
}
